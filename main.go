package main

import (
	"crypto/tls"
	"encoding/json"
	"flag"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"os"
	"os/signal"
	"path/filepath"
	"sort"
	"strconv"
	"strings"
	"sync"
	"syscall"
	"time"

	"github.com/PuerkitoBio/goquery"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

const (
	// –¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
	TARGET_MESSAGE = "–í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è" // –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ –≤–∞—à —Ç–µ–∫—Å—Ç
)

type CurrencyRate struct {
	Code   string
	Buy    float64
	Sell   float64
	Change string
}

type CachedRates struct {
	Rates       []CurrencyRate
	LastUpdated time.Time
	mu          sync.RWMutex
}

type BillData struct {
	PaymentDue     string `json:"–¢–µ—Ä–º—ñ–Ω –æ–ø–ª–∞—Ç–∏"`
	Amount         string `json:"–°—É–º–∞ –¥–æ —Å–ø–ª–∞—Ç–∏"`
	PaymentPurpose string `json:"–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É"`
}

var (
	cache CachedRates
	loc   *time.Location
)

func main() {
	// Parse command line arguments
	sendFlag := flag.Bool("send", false, "–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ –±–æ—Ç–∞")
	flag.Parse()

	// –Ø–∫—â–æ –≤–∫–∞–∑–∞–Ω–æ –∫–æ–º–∞–Ω–¥—É –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
	if *sendFlag {
		sendMessageOnly()
		return
	}

	// Initialize Kyiv timezone
	initTimezone()

	botToken := os.Getenv("TELEGRAM_BOT_TOKEN")
	if botToken == "" {
		log.Fatal("–ó–º—ñ–Ω–Ω–∞ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ TELEGRAM_BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
	}

	// Initialize cache
	cache = CachedRates{
		Rates:       make([]CurrencyRate, 0),
		LastUpdated: time.Time{},
	}

	// Start background updater
	go startBackgroundUpdater()

	// Create bot with custom HTTP client
	bot, err := tgbotapi.NewBotAPIWithClient(botToken, tgbotapi.APIEndpoint, &http.Client{
		Transport: &http.Transport{
			TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
		},
	})
	if err != nil {
		log.Fatal("–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–æ—Ç–∞: ", err)
	}

	bot.Debug = true
	log.Printf("–ë–æ—Ç %s –∑–∞–ø—É—â–µ–Ω–∏–π (—á–∞—Å —Å–µ—Ä–≤–µ—Ä–∞: %s)", bot.Self.UserName, time.Now().In(loc).Format("02.01.2006 15:04"))

	// Configure updates
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates := bot.GetUpdatesChan(u)

	// Handle shutdown signals
	sigChan := make(chan os.Signal, 1)
	signal.Notify(sigChan, syscall.SIGINT, syscall.SIGTERM)

	// Main loop
	for {
		select {
		case update := <-updates:
			if update.Message == nil {
				continue
			}

			// Log received message
			log.Printf("[%s] %s", update.Message.From.UserName, update.Message.Text)
			log.Printf("ID —á–∞—Ç—É: %d", update.Message.Chat.ID)

			// Handle commands
			switch update.Message.Command() {
			case "start":
				sendMessage(bot, update.Message.Chat.ID,
					"üëã –í—ñ—Ç–∞—é! –¶–µ–π –±–æ—Ç –ø–æ–∫–∞–∑—É—î –∞–∫—Ç—É–∞–ª—å–Ω—ñ –∫—É—Ä—Å–∏ –≤–∞–ª—é—Ç.\n\n"+
						"–î–æ—Å—Ç—É–ø–Ω–∞ –∫–æ–º–∞–Ω–¥–∞:\n/rates - –ø–æ—Ç–æ—á–Ω—ñ –∫—É—Ä—Å–∏")

			case "rates":
				currentRates := getCurrentRates()
				if len(currentRates.Rates) == 0 {
					sendMessage(bot, update.Message.Chat.ID, "‚è≥ –î–∞–Ω—ñ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—é—Ç—å—Å—è...")
					continue
				}
				sendRates(bot, update.Message.Chat.ID, currentRates)

			default:
				// –ù–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –Ω–∞ —ñ–Ω—à—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
				continue
			}

		case <-sigChan:
			log.Println("–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ –±–æ—Ç–∞...")
			return
		}
	}
}

func initTimezone() {
	var err error
	loc, err = time.LoadLocation("Europe/Kiev")
	if err != nil {
		// Fallback to UTC+3 if timezone loading fails
		loc = time.FixedZone("EET", 3*60*60)
		log.Printf("–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —Ñ—ñ–∫—Å–æ–≤–∞–Ω–∏–π —á–∞—Å–æ–≤–∏–π –ø–æ—è—Å: UTC+3")
	}
}

func startBackgroundUpdater() {
	// Initial update
	updateRates()

	// Update every hour
	ticker := time.NewTicker(1 * time.Hour)
	defer ticker.Stop()

	for range ticker.C {
		updateRates()
	}
}

func updateRates() {
	newRates, err := fetchRatesFromSite()
	if err != nil {
		log.Printf("–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—É—Ä—Å—ñ–≤: %v", err)
		return
	}

	cache.mu.Lock()
	defer cache.mu.Unlock()

	cache.Rates = newRates
	cache.LastUpdated = time.Now().In(loc)
	log.Printf("–ö—É—Ä—Å–∏ –æ–Ω–æ–≤–ª–µ–Ω–æ –æ %s", cache.LastUpdated.Format("15:04"))
}

func getCurrentRates() CachedRates {
	cache.mu.RLock()
	defer cache.mu.RUnlock()

	return CachedRates{
		Rates:       cache.Rates,
		LastUpdated: cache.LastUpdated,
	}
}

func fetchRatesFromSite() ([]CurrencyRate, error) {
	client := &http.Client{
		Transport: &http.Transport{
			TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
		},
		Timeout: 10 * time.Second,
	}

	resp, err := client.Get("https://rulya-bank.com.ua/")
	if err != nil {
		return nil, fmt.Errorf("–ø–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É: %v", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("HTTP —Å—Ç–∞—Ç—É—Å: %d", resp.StatusCode)
	}

	doc, err := goquery.NewDocumentFromReader(resp.Body)
	if err != nil {
		return nil, fmt.Errorf("–ø–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É HTML: %v", err)
	}

	var rates []CurrencyRate
	targetCurrencies := map[string]bool{"USD": true, "EUR": true, "PLZ": true}

	doc.Find("table tr").Each(func(i int, row *goquery.Selection) {
		if i == 0 { // Skip header row
			return
		}

		cols := row.Find("td")
		if cols.Length() < 4 {
			return
		}

		currency := cols.Eq(1).Find("h3").Text()
		if !targetCurrencies[currency] {
			return
		}

		buy, err := strconv.ParseFloat(strings.TrimSpace(cols.Eq(2).Find("h3").Text()), 64)
		if err != nil {
			log.Printf("–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É –∫—É–ø—ñ–≤–ª—ñ %s: %v", currency, err)
			return
		}

		sell, err := strconv.ParseFloat(strings.TrimSpace(cols.Eq(3).Find("h3").Text()), 64)
		if err != nil {
			log.Printf("–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É –ø—Ä–æ–¥–∞–∂—É %s: %v", currency, err)
			return
		}

		change := ""
		if changeElem := cols.Eq(2).Find("sup font"); changeElem.Length() > 0 {
			change = strings.TrimSpace(changeElem.Text())
		}

		rates = append(rates, CurrencyRate{
			Code:   currency,
			Buy:    buy,
			Sell:   sell,
			Change: change,
		})
	})

	if len(rates) == 0 {
		return nil, fmt.Errorf("–Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫—É—Ä—Å—ñ–≤ –≤–∞–ª—é—Ç")
	}

	return rates, nil
}

func sendMessage(bot *tgbotapi.BotAPI, chatID int64, text string) {
	msg := tgbotapi.NewMessage(chatID, text)
	if _, err := bot.Send(msg); err != nil {
		log.Printf("–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: %v", err)
	}
}

func sendRates(bot *tgbotapi.BotAPI, chatID int64, rates CachedRates) {
	// Format time with timezone abbreviation
	timeZone := "EET"
	if isDaylightSavingTime(rates.LastUpdated) {
		timeZone = "EEST"
	}

	response := fmt.Sprintf("üìä –ö—É—Ä—Å–∏ –≤–∞–ª—é—Ç (–æ–Ω–æ–≤–ª–µ–Ω–æ %s %s):\n\n",
		rates.LastUpdated.Format("02.01.2006 15:04"),
		timeZone)

	for _, rate := range rates.Rates {
		line := fmt.Sprintf("‚û° %s: %.2f / %.2f", rate.Code, rate.Buy, rate.Sell)
		if rate.Change != "" {
			line += fmt.Sprintf(" (%s)", rate.Change)
		}
		response += line + "\n"
	}

	sendMessage(bot, chatID, response)
}

func isDaylightSavingTime(t time.Time) bool {
	// Ukraine switches to EEST at 03:00 on last Sunday in March
	// and back to EET at 04:00 on last Sunday in October
	year := t.Year()
	marchTime := time.Date(year, time.March, 31, 0, 0, 0, 0, loc)
	for marchTime.Weekday() != time.Sunday {
		marchTime = marchTime.AddDate(0, 0, -1)
	}
	marchTime = marchTime.Add(3 * time.Hour)

	octoberTime := time.Date(year, time.October, 31, 0, 0, 0, 0, loc)
	for octoberTime.Weekday() != time.Sunday {
		octoberTime = octoberTime.AddDate(0, 0, -1)
	}
	octoberTime = octoberTime.Add(4 * time.Hour)

	return t.After(marchTime) && t.Before(octoberTime)
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ —Ä–∞—Ö—É–Ω–∫—É
func getLatestBill() (*BillData, error) {
	invoiceDir := "/media/xi/life-invoice"

	// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è
	if _, err := os.Stat(invoiceDir); os.IsNotExist(err) {
		return nil, fmt.Errorf("–¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è %s –Ω–µ —ñ—Å–Ω—É—î", invoiceDir)
	}

	files, err := ioutil.ReadDir(invoiceDir)
	if err != nil {
		return nil, fmt.Errorf("–ø–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó %s: %v", invoiceDir, err)
	}

	var jsonFiles []string
	for _, file := range files {
		if !file.IsDir() && strings.HasSuffix(file.Name(), ".json") {
			jsonFiles = append(jsonFiles, filepath.Join(invoiceDir, file.Name()))
		}
	}

	if len(jsonFiles) == 0 {
		return nil, fmt.Errorf("–Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ JSON —Ñ–∞–π–ª—ñ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó %s", invoiceDir)
	}

	// –°–æ—Ä—Ç—É—î–º–æ —Ñ–∞–π–ª–∏ –∑–∞ –¥–∞—Ç–æ—é –º–æ–¥–∏—Ñ—ñ–∫–∞—Ü—ñ—ó (–Ω–∞–π–Ω–æ–≤—ñ—à–∏–π –ø–µ—Ä—à–∏–π)
	sort.Slice(jsonFiles, func(i, j int) bool {
		infoI, _ := os.Stat(jsonFiles[i])
		infoJ, _ := os.Stat(jsonFiles[j])
		return infoI.ModTime().After(infoJ.ModTime())
	})

	// –ß–∏—Ç–∞—î–º–æ –Ω–∞–π–Ω–æ–≤—ñ—à–∏–π —Ñ–∞–π–ª
	data, err := ioutil.ReadFile(jsonFiles[0])
	if err != nil {
		return nil, fmt.Errorf("–ø–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É %s: %v", jsonFiles[0], err)
	}

	var bill BillData
	if err := json.Unmarshal(data, &bill); err != nil {
		return nil, fmt.Errorf("–ø–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É JSON: %v", err)
	}

	return &bill, nil
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
func formatMessage(bill *BillData) string {
	return fmt.Sprintf("üì¢ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∑–∞–ø–ª–∞—Ç–∏—Ç–∏ –∑–∞ Life!\n\n"+
		"üí∞ –î–æ –æ–ø–ª–∞—Ç–∏: %s\n"+
		"‚è∞ –û–ø–ª–∞—Ç–∏—Ç–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ: %s",
		bill.Amount,
		bill.PaymentDue)
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–µ–∑ –∑–∞–ø—É—Å–∫—É –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—É –±–æ—Ç–∞
func sendMessageOnly() {
	botToken := os.Getenv("TELEGRAM_BOT_TOKEN")
	if botToken == "" {
		log.Fatal("–ó–º—ñ–Ω–Ω–∞ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ TELEGRAM_BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
	}

	chatIDStr := os.Getenv("TARGET_CHAT_ID")
	if chatIDStr == "" {
		log.Fatal("–ó–º—ñ–Ω–Ω–∞ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ TARGET_CHAT_ID –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
	}

	chatID, err := strconv.ParseInt(chatIDStr, 10, 64)
	if err != nil {
		log.Fatalf("–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É ID —á–∞—Ç—É: %v", err)
	}

	// –û—Ç—Ä–∏–º—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ä–∞—Ö—É–Ω–æ–∫
	bill, err := getLatestBill()
	if err != nil {
		log.Fatalf("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—É: %v", err)
	}

	// –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
	message := formatMessage(bill)

	// Create bot with custom HTTP client
	bot, err := tgbotapi.NewBotAPIWithClient(botToken, tgbotapi.APIEndpoint, &http.Client{
		Transport: &http.Transport{
			TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
		},
	})
	if err != nil {
		log.Fatal("–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–æ—Ç–∞: ", err)
	}

	sendMessage(bot, chatID, message)
	log.Println("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ")
}
